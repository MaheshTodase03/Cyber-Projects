import socket
import argparse

# Port Scanner Module
def port_scanner(target, ports):
    print(f"Starting port scan on {target}")
    open_ports = []
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((target, port))
        if result == 0:
            print(f"Port {port} is open.")
            open_ports.append(port)
        sock.close()
    return open_ports

# Brute-Forcer Module
def brute_force(target, port, username, password_list):
    print(f"Starting brute force attack on {target}:{port}")
    for password in password_list:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect((target, port))
            sock.send(f"{username}\n{password}\n".encode())
            response = sock.recv(1024).decode()
            sock.close()
            if "success" in response.lower():
                print(f"Password found: {password}")
                return password
        except Exception as e:
            print(f"Error during brute force: {e}")
    print("Password not found.")
    return None

# Main Program
def main():
    parser = argparse.ArgumentParser(description="Penetration Testing Toolkit")
    subparsers = parser.add_subparsers(dest="module", help="Available modules")

    # Port Scanner Arguments
    scanner_parser = subparsers.add_parser("port-scan", help="Scan ports on a target")
    scanner_parser.add_argument("target", type=str, help="Target IP address or hostname")
    scanner_parser.add_argument("--ports", type=str, default="1-1024", help="Range of ports to scan (default: 1-1024)")

    # Brute-Forcer Arguments
    brute_parser = subparsers.add_parser("brute-force", help="Perform brute force attack")
    brute_parser.add_argument("target", type=str, help="Target IP address or hostname")
    brute_parser.add_argument("port", type=int, help="Target port")
    brute_parser.add_argument("username", type=str, help="Username for authentication")
    brute_parser.add_argument("password_file", type=str, help="File containing list of passwords")

    args = parser.parse_args()

    if args.module == "port-scan":
        start, end = map(int, args.ports.split("-"))
        ports = range(start, end + 1)
        port_scanner(args.target, ports)
    elif args.module == "brute-force":
        with open(args.password_file, "r") as file:
            password_list = file.read().splitlines()
        brute_force(args.target, args.port, args.username, password_list)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
